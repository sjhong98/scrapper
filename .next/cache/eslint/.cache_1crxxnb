[{"/Users/hongseungjae/Desktop/learning.js/scrapper/app/board/[id]/page.tsx":"1","/Users/hongseungjae/Desktop/learning.js/scrapper/app/layout.tsx":"2","/Users/hongseungjae/Desktop/learning.js/scrapper/app/page.tsx":"3","/Users/hongseungjae/Desktop/learning.js/scrapper/app/posts/page.tsx":"4","/Users/hongseungjae/Desktop/learning.js/scrapper/app/reset/pages.tsx":"5","/Users/hongseungjae/Desktop/learning.js/scrapper/app/signup/page.tsx":"6","/Users/hongseungjae/Desktop/learning.js/scrapper/app/scrap/page.tsx":"7"},{"size":8561,"mtime":1697553904380,"results":"8","hashOfConfig":"9"},{"size":441,"mtime":1697024158214,"results":"10","hashOfConfig":"9"},{"size":14817,"mtime":1697557069522,"results":"11","hashOfConfig":"9"},{"size":8174,"mtime":1697556810972,"results":"12","hashOfConfig":"9"},{"size":323,"mtime":1697184685491,"results":"13","hashOfConfig":"9"},{"size":3747,"mtime":1697557213628,"results":"14","hashOfConfig":"9"},{"size":8623,"mtime":1697557176779,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"1g2y22b",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/Users/hongseungjae/Desktop/learning.js/scrapper/app/board/[id]/page.tsx",["41"],[],"\"use client\";\n\n// 서버에 reverse된 순서로 저장했다가, 0~30 인덱스만 받아오기 -> 자동으로 갱신되는 것\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { useRouter } from 'next/navigation'\nimport { initializeApp } from \"firebase/app\";\nimport HomeIcon from '@mui/icons-material/Home';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport StarIcon from '@mui/icons-material/Star';\nimport { \n  getFirestore, \n  query,\n  orderBy,\n  updateDoc,   // update document\n  getDocs,  // 전체 읽어오기\n  doc,       // 특정 데이터 읽기\n  collection\n } from \"firebase/firestore\";\n\nimport '../../styles/main.css';\n\nexport default function Board(params: any) {\n  const lineRef = useRef<HTMLDivElement | null>(null);\n  const inputContainerRef = useRef<HTMLDivElement | null>(null);\n  const menuRef = useRef<HTMLDivElement | null>(null);\n  const homeRef = useRef<SVGSVGElement | null>(null);\n  const myRef = useRef<SVGSVGElement | null>(null);\n  const router = useRouter();\n\n  const [logo, setLogo] = useState(\"\");\n  const [contentRev, setContentRev] = useState([]);\n  const [lineIndex, setLineIndex] = useState(-1);\n  const [postList, setPostList] = useState<Document[]>([]);\n  const [id, setId] = useState(params.params.id);\n  const [selectedId, setselectedId] = useState<string>(\"\");;\n  const [msgData, setMsgData] = useState([]);\n  const [menuHomeOver, setMenuHomeOver] = useState(false);\n  const [menuMyOver, setMenuMyOver] = useState(false);\n  const [menuScrapOver, setMenuScrapOver] = useState(false);\n\n  const firebaseConfig = {\n    apiKey: \"AIzaSyB0wNhng69y2_dkHsPjN1k579LeYrSQWdU\",\n    authDomain: \"scrapper-9558b.firebaseapp.com\",\n    databaseURL: \"https://scrapper-9558b-default-rtdb.asia-southeast1.firebasedatabase.app\",\n    projectId: \"scrapper-9558b\",\n    storageBucket: \"scrapper-9558b.appspot.com\",\n    messagingSenderId: \"241265284136\",\n    appId: \"1:241265284136:web:253ec9f008e31a3d03911d\"\n  };\n  const app = initializeApp(firebaseConfig);\n  const db = getFirestore(app);\n\n  useEffect(() => {\n    let i = 0;\n    let ch = params.params.id[0] + params.params.id;\n\n    const typeLogo = setInterval(() => {\n      if (i < ch.length-1) {\n        setLogo((prev) => prev + ch[i]);\n        i++;\n      } else {\n        clearInterval(typeLogo);\n      }\n    }, 120);\n\n    inputContainerRef.current && inputContainerRef.current.classList.add('textarea-show-up');\n    menuRef.current && menuRef.current.classList.add('textarea-show-up');\n    getContentFromDb();\n\n    return () => {\n      clearInterval(typeLogo);    // 렌더링될때마다 setInterval 활성화되는 것 방지\n    };\n  }, [])\n\n  useEffect(() => {\n    if(msgData){\n      let temp = msgData && [...msgData].reverse();\n      setContentRev(temp);\n    }\n  }, [msgData]);\n\n\n  const getContentFromDb = async () => {   \n    let q = query(collection(db, 'posts'), orderBy('time', 'desc'))\n    await getDocs(q)\n    .then(res => {\n      let temp: Document[] = [];\n      res.forEach(doc => {\n        let docTemp = doc.data();\n        if(docTemp.user === id) {\n          docTemp.postId = doc.id;\n          temp.push(docTemp as Document);\n        }\n      });    \n      setPostList(temp);\n    })\n  }\n\n  const uploadLikes= (postId: string, newLikes: string) => {\n    console.log(postId, newLikes)\n\n    const documentRef = doc(db, 'posts', postId);\n    updateDoc(documentRef, {\n      likes: newLikes\n    });\n    getContentFromDb();\n  }\n\n  const handleTextSelection = () => {\n    let startIndex;\n    let endIndex;\n    console.log(postList);\n    const findObj = postList.find((item: any) => (item as any).postId === selectedId) as any;\n\n    const selection = window.getSelection();\n\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const selectedText = range.toString();\n      startIndex = findObj.msg.indexOf(selectedText);\n      endIndex = startIndex + selectedText.length - 1;\n    }\n\n    let testLineBreaks = \"\";    // 줄바꿈 문자만큼 하이라이트를 앞 당김\n    for(let i=0; i<startIndex; i++) {\n      testLineBreaks += findObj.msg[i];\n    }\n    let linebreaks = 0;\n    const matches = testLineBreaks.match(/\\\\n/g);\n    if (matches !== null) {\n      linebreaks = matches.length;\n    }\n\n    if(linebreaks > 0) {\n      startIndex -= linebreaks;\n      if(endIndex !== undefined)\n        endIndex -= linebreaks;\n    } \n\n    let length\n    if(endIndex !== undefined)\n      length = endIndex - startIndex;\n    let count = startIndex;\n\n    if(length !== undefined)\n      for(let i=0; i<length+1; i++) {\n        findObj.likes = findObj.likes + count.toString() + \" \";\n        count++;\n      }\n\n    uploadLikes(selectedId, findObj.likes);\n  };\n\n  return (\n    <div className=\"h-auto min-h-screen w-screen bg-white flex flex-col justify-center items-center\">\n      <div className=\"h-1/6 w-1/2 flex justify-center items-center fixed top-0 z-40\">\n        <p \n          className=\"tracking-[-5px] text-black text-8xl border-r-4 border-black pr-[15px] cursor-pointer\" \n          style={{fontFamily:'lemon-r'}}>\n            {logo}\n        </p>\n      </div>\n\n      <div className=\"right-0 mr-12 mt-12 opacity-0 fixed top-0 cursor-pointer flex flex-col\" style={{zIndex:9999}} ref={menuRef} >\n          <DashboardIcon ref={homeRef} onClick={()=>router.push('/posts')} onMouseOver={()=>setMenuHomeOver(true)} onMouseLeave={()=>setMenuHomeOver(false)} className={menuHomeOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black'}} />\n          <HomeIcon ref={myRef} onClick={()=>router.push('/')} onMouseOver={()=>setMenuMyOver(true)} onMouseLeave={()=>setMenuMyOver(false)} className={menuMyOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black', marginTop:'3vh'}} />\n          <StarIcon onClick={()=>router.push('/scrap')} onMouseOver={()=>setMenuScrapOver(true)} onMouseLeave={()=>setMenuScrapOver(false)} className={menuScrapOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black', marginTop:'3vh'}} />\n      </div>\n\n      <div ref={inputContainerRef} className=\"w-screen flex flex-col mt-60 justify-center items-center absolute transform translate-y-16 opacity-0 overflow-hidden\">\n        <div className=\"w-5/6 mt-32 h-screen flex flex-col items-center\">\n        { postList.map((item: any, index: number) => {\n            const unescapedMsg = item.msg.replace(/\\\\n/g, \"\\n\");\n            \n            // 좋아요 정보 시각화 로직\n            let likesCount:any = [];\n            let likes = item.likes.split(\" \");\n            for(let i=0; i<unescapedMsg.length; i++)  // 초기화\n              likesCount[i] = 0;\n            for(let i=0; i<likes.length; i++) { // 드래그된 부분의 숫자 증가\n              likesCount[likes[i]] = likesCount[likes[i]] + 1;\n            }\n              return (\n                \n                  <p \n                    key={index} \n                    ref={lineRef}\n                    onMouseOver={() => {setLineIndex(index); setselectedId(item.postId)}} \n                    onMouseLeave={() => setLineIndex(-1)}\n                    style={{ whiteSpace: 'pre-wrap' }}\n                    className={index === lineIndex ? \"leading-[38px] text-black font-extralight p-3 mt-2 text-[20px] text-center rounded-md line-highlight\" : \"leading-[38px] text-black font-extralight text-[20px] p-3 mt-2 text-center rounded-md line-un-highlight\"}\n                  >\n                  { unescapedMsg.split(\"\").map((char: string, index: number) => {\n                      let changeColor;\n                      if(likesCount[index] > 8) changeColor = '#A6A6A6';\n                      else if(likesCount[index] >= 7) changeColor = '#ADADAD';\n                      else if(likesCount[index] >= 6) changeColor = '#B5B5B5';\n                      else if(likesCount[index] >= 5) changeColor = '#BFBFBF';\n                      else if(likesCount[index] >= 4) changeColor = '#CCCCCC';\n                      else if(likesCount[index] >= 3) changeColor = '#D9D9D9';\n                      else if(likesCount[index] >= 2) changeColor = '#E6E6E6';\n                      else if(likesCount[index] >= 1) changeColor = '#F2F2F2';\n                      else changeColor = '#FFF'\n\n                      return (\n                        <span key={index} onMouseUp={handleTextSelection} className=\"text-black\" style={{ backgroundColor: changeColor, userSelect: 'text' }}>{char}</span>\n                      )\n                    })\n                  }\n                  </p>\n              );\n          })}\n        </div>\n      </div>\n      \n    </div>\n  )\n}","/Users/hongseungjae/Desktop/learning.js/scrapper/app/layout.tsx",[],[],"/Users/hongseungjae/Desktop/learning.js/scrapper/app/page.tsx",["42"],[],"\"use client\";\n\n// 서버에 reverse된 순서로 저장했다가, 0~30 인덱스만 받아오기 -> 자동으로 갱신되는 것\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { useRouter } from 'next/navigation'\nimport { initializeApp } from \"firebase/app\";\nimport HomeIcon from '@mui/icons-material/Home';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport LogoutIcon from '@mui/icons-material/Logout';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport StarIcon from '@mui/icons-material/Star';\nimport { \n  getFirestore, \n  addDoc,   \n  updateDoc,   \n  getDocs,  \n  getDoc,  \n  deleteDoc, \n  collection,\n  orderBy,\n  query,\n  doc     \n } from \"firebase/firestore\";\n\nimport './styles/main.css';\n\nexport default function Home() {\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const lineRef = useRef<HTMLDivElement>(null);\n  const logoRef = useRef<HTMLParagraphElement>(null);\n  const inputContainerRef = useRef<HTMLDivElement>(null);\n  const loginRef = useRef<HTMLDivElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const router = useRouter();\n\n  const [logo, setLogo] = useState(\"\");\n  const [contentRev, setContentRev] = useState([]);\n  const [lineIndex, setLineIndex] = useState(-1);\n  const [result, setResult] = useState();\n  const [active, setActive] = useState(false);\n  const [msg, setMsg] = useState(\"\");\n  const [id, setId] = useState<any>(\"\");\n  const [pw, setPw] = useState(\"\");\n  const [writing, setWriting] = useState(\"\");\n  const [textareaHeight, setTextareaHeight] = useState(10);\n  const [selectedId, setselectedId] = useState<string>(\"\");;\n  const [msgData, setMsgData] = useState([]);\n  const [menuHomeOver, setMenuHomeOver] = useState(false);\n  const [menuMyOver, setMenuMyOver] = useState(false);\n  const [menuScrapOver, setMenuScrapOver] = useState(false);\n  const [menuLogoutOver, setMenuLogoutOver] = useState(false);\n  const [showId, setShowId] = useState(false);\n  const previousTime:any = new Date('2023-10-15T12:00:00');\n\n  const [postList, setPostList] = useState([]);\n\n  const firebaseConfig = {\n    apiKey: \"AIzaSyB0wNhng69y2_dkHsPjN1k579LeYrSQWdU\",\n    authDomain: \"scrapper-9558b.firebaseapp.com\",\n    databaseURL: \"https://scrapper-9558b-default-rtdb.asia-southeast1.firebasedatabase.app\",\n    projectId: \"scrapper-9558b\",\n    storageBucket: \"scrapper-9558b.appspot.com\",\n    messagingSenderId: \"241265284136\",\n    appId: \"1:241265284136:web:253ec9f008e31a3d03911d\"\n  };\n  const app = initializeApp(firebaseConfig);\n  const db = getFirestore(app);\n\n  useEffect(() => {\n    let _id:any = sessionStorage.getItem('scrapper-login');\n    setId(_id && _id);\n    let i = 0;\n    let ch = \"SSCRAPPER\";\n\n    const typeLogo = setInterval(() => {\n      if (i < ch.length-1) {\n        setLogo((prev) => prev + ch[i]);\n        i++;\n      } else {\n        clearInterval(typeLogo);\n      }\n    }, 120);\n\n    if(!sessionStorage.getItem('scrapper-login')) \n      if(loginRef.current !== undefined)\n        loginRef.current && loginRef.current.classList.add('login-show-up');\n    else {\n      getContentFromDb();\n      setTimeout(() => {\n        if(inputContainerRef.current !== undefined && inputRef.current !== undefined && menuRef !== undefined) {\n          inputContainerRef.current && inputContainerRef.current.classList.add('textarea-show-up');\n          inputRef.current && inputRef.current.classList.add('textarea-show-up');\n          menuRef.current && menuRef.current.classList.add('textarea-show-up');\n          inputRef.current && inputRef.current.focus();\n        }\n        \n      }, 1000);\n    }\n\n    return () => {\n      clearInterval(typeLogo);    // 렌더링될때마다 setInterval 활성화되는 것 방지\n    };\n  }, []);\n\n  useEffect(() => {\n    if(writing !== \"\") {\n      if(logoRef.current !== undefined && logoRef.current) {\n        logoRef.current.classList.remove('not-available-to-upload');\n        logoRef.current.classList.add('available-to-upload');\n      }\n    }\n    else {\n      if(logoRef.current !== undefined && logoRef.current) {\n        logoRef.current.classList.remove('available-to-upload');\n        logoRef.current.classList.add('not-available-to-upload');\n      }\n    }\n    if(writing.match(/\\n/g) !== null) {\n      const matchResult = writing.match(/\\n/g);\n      const lineCount = matchResult ? matchResult.length : 0;\n      setTextareaHeight((10 + lineCount) * 3.5);\n    }\n  }, [writing])\n\n  useEffect(() => {\n    if(msgData){\n      let temp = msgData && [...msgData].reverse();\n      setContentRev(temp);\n    }\n  }, [msgData]);\n\n  const handleLogin = async (e:any) => {\n    if(e.key === 'Enter') {   // 엔터가 눌렸을 때에만 반응\n      if(!id || !pw)\n        setMsg(\"모두 입력해주세요\");\n      else {\n        getContentFromDb();\n        getDoc(doc(db, 'accounts', id)).then((res:any) => {\n          let dbPw = res.data().password;\n          if(dbPw === null)\n            setMsg(\"존재하지 않는 아이디\");\n          else {\n            if(pw === dbPw) {\n              setMsg(\"\");\n              sessionStorage.setItem('scrapper-login', id);\n              loginRef.current && loginRef.current.classList.add('login-done');\n              inputContainerRef.current && inputContainerRef.current.classList.add('textarea-show-up');\n              menuRef.current && menuRef.current.classList.add('textarea-show-up');\n              setTimeout(() => {\n                inputRef.current && inputRef.current.classList.add('textarea-show-up');\n                inputRef.current && inputRef.current.focus();\n              }, 100);\n              getContentFromDb();\n            }\n            else \n              setMsg(\"비밀번호 미일치\");\n      }\n        });\n      }\n    }\n  };\n\n  const handleLogoOver = () => {\n    logoRef.current && logoRef.current.classList.add('font-black');\n  }\n\n  const handleLogoOut = () => {\n    logoRef.current && logoRef.current.classList.remove('font-black');\n  }\n\n  const handleLogoClick = () => {\n    uploadMsg(writing);\n  }\n  \n  const uploadMsg = (word: string) => {\n    let currentTime:any = new Date();\n    let uploadTime = currentTime - previousTime;\n    addDoc(collection(db, 'posts'), {\n      msg: word,\n      likes: \"\",\n      user: id,\n      time: uploadTime\n    })\n\n    getContentFromDb();\n    setWriting(\"\");\n  }\n\n  const getContentFromDb = async () => {   \n    let id = sessionStorage.getItem('scrapper-login');\n    let q = query(collection(db, 'posts'), orderBy('time', 'desc'))\n    await getDocs(q)\n    .then((res:any) => {\n      let temp:any = [];\n      res.forEach((doc:any) => {\n        let docTemp = doc.data();\n        if(docTemp.user === id) {\n          docTemp.postId = doc.id;\n          temp.push(docTemp);\n        }\n      });    \n      setPostList(temp);\n    })\n  }\n\n  const uploadLikes= (postId: string, newLikes: string) => {\n\n    const documentRef = doc(db, 'posts', postId);\n    updateDoc(documentRef, {\n      likes: newLikes\n    });\n    getContentFromDb();\n  }\n\n  const handleTextSelection = () => {\n    let startIndex;\n    let endIndex;\n    const findObj = postList.find((item: any) => (item as any).postId === selectedId) as any;\n\n    const selection = window.getSelection();\n\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const selectedText = range.toString();\n      startIndex = findObj.msg.indexOf(selectedText);\n      endIndex = startIndex + selectedText.length - 1;\n    }\n\n    let testLineBreaks = \"\";    // 줄바꿈 문자만큼 하이라이트를 앞 당김\n    for(let i=0; i<startIndex; i++) {\n      testLineBreaks += findObj.msg[i];\n    }\n    let linebreaks = 0;\n    if(testLineBreaks.match(/\\\\n/g) !== null) {\n      const _testLineBreaks = testLineBreaks.match(/\\\\n/g);\n      const _lineBreaks = _testLineBreaks ? _testLineBreaks.length : 0\n      linebreaks = _lineBreaks\n    }\n      \n\n    if(linebreaks > 0) {\n      startIndex -= linebreaks;\n      if(endIndex)\n      endIndex -= linebreaks;\n    } \n\n    let length;\n    if(endIndex !== undefined)\n    length = endIndex - startIndex;\n    let count = startIndex;\n\n    if(length!==undefined)\n      for(let i=0; i<length+1; i++) {\n        findObj.likes = findObj.likes + count.toString() + \" \";\n        count++;\n      }\n\n    uploadLikes(selectedId, findObj.likes);\n  };\n\n  const handleDelete = () => {\n    deleteDoc(doc(db, 'posts', selectedId))\n    .then((res:any) => {\n      alert(\"삭제되었습니다.\");\n    })\n    getContentFromDb();\n  }\n\n  const handleScrap = () => {   // 나중에 아이콘 채워지도록 만들기\n    getDoc(doc(db, 'accounts', id))\n    .then((res:any) => {\n      let _scrap = res.data().scrap;\n      for(let i=0; i<_scrap.length; i++) {\n        if(_scrap[i] === selectedId) {\n          alert(\"이미 스크랩된 게시물입니다.\");\n          return;\n        }\n      }\n      _scrap.push(selectedId);\n      updateDoc(doc(db, 'accounts', id), {\n        scrap: _scrap\n      })\n      .then((res:any) => {\n        alert(\"스크랩되었습니다.\");\n      })\n    })\n  }\n\n  return (\n    <div className=\"h-auto min-h-screen w-screen bg-white flex flex-col justify-center items-center\">\n      <div className=\"h-1/6 w-1/2 flex justify-center items-center fixed transform translate-y-80 top-0 z-40 logo-move-up\">\n        <p \n          onMouseOver={handleLogoOver}\n          onMouseOut={handleLogoOut}\n          onClick={handleLogoClick}\n          ref={logoRef} \n          className=\"tracking-[-5px] text-gray-500 text-8xl border-r-4 border-black pr-[15px] cursor-pointer\" \n          style={{fontFamily:'lemon-r'}}>\n            {logo}\n        </p>\n      </div>\n\n      <div className=\"right-0 mr-12 mt-12 opacity-0 fixed top-0 cursor-pointer flex flex-col\" style={{zIndex:9999}} ref={menuRef} >\n          <DashboardIcon onClick={()=>router.push('/posts')} onMouseOver={()=>setMenuHomeOver(true)} onMouseLeave={()=>setMenuHomeOver(false)} className={menuHomeOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black'}} />\n          <HomeIcon onClick={()=>router.push('/')} onMouseOver={()=>setMenuMyOver(true)} onMouseLeave={()=>setMenuMyOver(false)} className={menuMyOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black', marginTop:'3vh'}} />\n          <StarIcon onClick={()=>router.push('/scrap')} onMouseOver={()=>setMenuScrapOver(true)} onMouseLeave={()=>setMenuScrapOver(false)} className={menuScrapOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black', marginTop:'3vh'}} />\n          <LogoutIcon onClick={()=>{sessionStorage.clear(); window.location.reload()}} onMouseOver={()=>{setShowId(true); setMenuLogoutOver(true);}} onMouseLeave={()=>{setShowId(false); setMenuLogoutOver(false);}} className={menuLogoutOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:40, marginLeft:'8px', color:'black', marginTop:'3vh'}} />\n      </div>\n\n      <div ref={loginRef} className=\"w-screen h-screen absolute flex flex-col justify-center items-center transform -translate-y-32 opacity-0\">\n        <input placeholder=\"EMAIL\" value={id} onChange={e => setId(e.target.value)} onKeyDown={e => {if(e.key === 'Enter') handleLogin(e)}} type='text' className=\"w-1/5 focus:outline-none text-center text-3xl border-b-2 border-black pb-2 placeholder-black\" />\n        <input placeholder=\"PW\" value={pw} onChange={e => setPw(e.target.value)} onKeyDown={e => {if(e.key === 'Enter') handleLogin(e)}} type='password' className=\"w-1/5 focus:outline-none text-center text-3xl border-b-2 border-black pb-2 placeholder-black mt-12\" />\n        <p className=\"text-xl mt-12\">{msg}</p>\n        <a className=\"text-xl mt-12\" href='/signup' >or  SIGN UP</a>\n      </div>\n\n\n      <div ref={inputContainerRef} className=\"w-screen flex flex-col mt-60 justify-center items-center absolute transform translate-y-16 opacity-0 overflow-hidden\">\n        <textarea\n          value={writing}\n          onChange={(e) => setWriting(e.target.value)}\n          ref={inputRef} \n          style={{height:`${textareaHeight}vh`}}\n          className=\"w-5/6 text-black text-2xl text-center font-thin mt-80 focus:outline-none overflow-hidden resize-none\" \n        />\n        <div className=\"w-5/6 h-screen flex flex-col items-center\">\n        { postList.map((item: any, index: any) => {\n            const unescapedMsg = item.msg.replace(/\\\\n/g, \"\\n\");\n            \n            // 좋아요 정보 시각화 로직\n            let likesCount:any = [];\n            let likes = item.likes.split(\" \");\n            for(let i=0; i<unescapedMsg.length; i++)  // 초기화\n              likesCount[i] = 0;\n            for(let i=0; i<likes.length; i++) { // 드래그된 부분의 숫자 증가\n              likesCount[likes[i]] = likesCount[likes[i]] + 1;\n            }\n              return (\n                <div key={index} className=\"flex flex-row justify-center items-center ml-6\" onMouseOver={() => {setLineIndex(index); setselectedId(item.postId)}} onMouseLeave={() => setLineIndex(-1)}>\n                  <p \n                    key={index} \n                    ref={lineRef}\n                    style={{ whiteSpace: 'pre-wrap' }}\n                    className={index === lineIndex ? \"leading-[38px] text-black font-extralight p-3 mt-2 text-[20px] text-center rounded-md line-highlight\" : \"leading-[38px] text-black font-extralight text-[20px] p-3 mt-2 text-center rounded-md line-un-highlight\"}\n                  >\n                  { unescapedMsg.split(\"\").map((char: string, index: number) => {\n                      let changeColor;\n                      if(likesCount[index] > 8) changeColor = '#A6A6A6';\n                      else if(likesCount[index] >= 7) changeColor = '#ADADAD';\n                      else if(likesCount[index] >= 6) changeColor = '#B5B5B5';\n                      else if(likesCount[index] >= 5) changeColor = '#BFBFBF';\n                      else if(likesCount[index] >= 4) changeColor = '#CCCCCC';\n                      else if(likesCount[index] >= 3) changeColor = '#D9D9D9';\n                      else if(likesCount[index] >= 2) changeColor = '#E6E6E6';\n                      else if(likesCount[index] >= 1) changeColor = '#F2F2F2';\n                      else changeColor = '#FFF'\n\n                      return (\n                        <span key={index} onMouseUp={handleTextSelection} className=\"text-black\" style={{ backgroundColor: changeColor, userSelect: 'text' }}>{char}</span>\n                      )\n                    })\n                  }\n                  </p>\n                  <div className={index === lineIndex ? \"opacity-1\" : \"opacity-0\"}>\n                    <StarIcon sx={{color:'#333', cursor:'pointer'}} onClick={handleScrap} />\n                    <DeleteIcon sx={{color:'#333', cursor:'pointer'}} onClick={handleDelete} />\n                  </div>\n                </div>\n              );  \n          })}\n        </div>\n      </div>\n      \n    </div>\n  )\n}","/Users/hongseungjae/Desktop/learning.js/scrapper/app/posts/page.tsx",["43"],[],"\"use client\";\n\n// 서버에 reverse된 순서로 저장했다가, 0~30 인덱스만 받아오기 -> 자동으로 갱신되는 것\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { useRouter } from 'next/navigation'\nimport { initializeApp } from \"firebase/app\";\nimport HomeIcon from '@mui/icons-material/Home';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport StarIcon from '@mui/icons-material/Star';\nimport { \n  getFirestore, \n  collection,\n  orderBy,\n  // addDoc,   // 임의의 Id 지정\n  // setDoc,   // Id 지정 가능\n  updateDoc,   // update document\n  arrayUnion,   // push elem to array\n  getDocs,  // 전체 읽어오기\n  getDoc,   // 문서 하나 읽어오기\n  deleteDoc, // 삭제\n  doc,       // 특정 데이터 읽기\n  query,\n } from \"firebase/firestore\";\n\nimport '../styles/main.css';\n\nexport default function Posts() {\n    const router = useRouter();\n    const [postList, setPostList] = useState([]);\n    const [lineIndex, setLineIndex] = useState(-1);\n    const [menuHomeOver, setMenuHomeOver] = useState(false);\n    const [menuMyOver, setMenuMyOver] = useState(false);\n    const [selectedId, setSelectedId] = useState<string>(\"\");\n    const [menuScrapOver, setMenuScrapOver] = useState(false);\n\n    const firebaseConfig = {\n        apiKey: \"AIzaSyB0wNhng69y2_dkHsPjN1k579LeYrSQWdU\",\n        authDomain: \"scrapper-9558b.firebaseapp.com\",\n        databaseURL: \"https://scrapper-9558b-default-rtdb.asia-southeast1.firebasedatabase.app\",\n        projectId: \"scrapper-9558b\",\n        storageBucket: \"scrapper-9558b.appspot.com\",\n        messagingSenderId: \"241265284136\",\n        appId: \"1:241265284136:web:253ec9f008e31a3d03911d\"\n    };\n    const app = initializeApp(firebaseConfig);\n    const db = getFirestore(app);\n    \n    useEffect(() => {\n        getContentFromDb();\n    }, []);\n\n    const getContentFromDb = async () => {   \n        let q = query(collection(db, 'posts'), orderBy('time', 'desc'))\n        await getDocs(q)\n        .then((res:any) => {\n          let temp:any = [];\n          res.forEach((doc:any) => {\n            let docTemp = doc.data();\n            docTemp.postId = doc.id;\n            temp.push(docTemp);\n          });    \n          setPostList(temp);\n          console.log(temp);\n        })\n      }\n\n    const uploadLikes= (postId:string, newLikes:string) => {\n        const documentRef = doc(db, 'posts', postId);\n        updateDoc(documentRef, {\n            likes: newLikes\n        });\n        getContentFromDb();\n    }\n    \n    const handleTextSelection = () => {\n        let startIndex;\n        let endIndex;\n        console.log(postList);\n        const findObj = postList.find((item: any) => (item as any).postId === selectedId) as any;\n    \n        const selection = window.getSelection();\n    \n        if (selection && selection.rangeCount > 0) {\n          const range = selection.getRangeAt(0);\n          const selectedText = range.toString();\n          startIndex = findObj.msg.indexOf(selectedText);\n          endIndex = startIndex + selectedText.length - 1;\n        }\n    \n        let testLineBreaks = \"\";    // 줄바꿈 문자만큼 하이라이트를 앞 당김\n        for(let i=0; i<startIndex; i++) {\n          testLineBreaks += findObj.msg[i];\n        }\n        let linebreaks = 0;\n        const matches = testLineBreaks.match(/\\\\n/g);\n        if (matches !== null) {\n          linebreaks = matches.length;\n        }\n    \n        if(linebreaks > 0) {\n          startIndex -= linebreaks;\n          if(endIndex !== undefined)\n            endIndex -= linebreaks;\n        } \n    \n        let length\n        if(endIndex !== undefined)\n          length = endIndex - startIndex;\n        let count = startIndex;\n    \n        if(length !== undefined)\n          for(let i=0; i<length+1; i++) {\n            findObj.likes = findObj.likes + count.toString() + \" \";\n            count++;\n          }\n    \n        uploadLikes(selectedId, findObj.likes);\n      };\n    \n\n    return (\n        <div className=\"h-auto min-h-screen w-screen bg-white flex flex-col justify-center items-center\">\n            <div className=\"h-1/6 w-1/2 flex justify-center items-center fixed top-0 z-40\">\n                <p \n                    className=\"tracking-[-5px] text-black text-8xl border-r-4 border-black pr-[15px] \"\n                    style={{fontFamily:'lemon-r'}}>\n                    SCRAPPER\n                </p>\n            </div>\n\n            <div className=\"right-0 mr-12 mt-12 opacity-1 fixed top-0 cursor-pointer flex flex-col\" style={{zIndex:9999}} >\n                <DashboardIcon onClick={()=>router.push('/posts')} onMouseOver={()=>setMenuHomeOver(true)} onMouseLeave={()=>setMenuHomeOver(false)} className={menuHomeOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black'}} />\n                <HomeIcon onClick={()=>router.push('/')} onMouseOver={()=>setMenuMyOver(true)} onMouseLeave={()=>setMenuMyOver(false)} className={menuMyOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black', marginTop:'3vh'}} />\n                <StarIcon onClick={()=>router.push('/scrap')} onMouseOver={()=>setMenuScrapOver(true)} onMouseLeave={()=>setMenuScrapOver(false)} className={menuScrapOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black', marginTop:'3vh'}} />\n            </div>\n\n            <div className=\"w-5/6 h-screen\">\n                <div className=\"h-1/5\" />\n                <div className=\"h-auto flex flex-col justify-center items-center\">\n                { postList.map((item:any, index:any) => {\n                    const unescapedMsg = item.msg.replace(/\\\\n/g, \"\\n\");\n                    \n                    // 좋아요 정보 시각화 로직\n                    let likesCount:any = [];\n                    let likes = item.likes.split(\" \");\n                    for(let i=0; i<unescapedMsg.length; i++)  // 초기화\n                    likesCount[i] = 0;\n                    for(let i=0; i<likes.length; i++)  // 드래그된 부분의 숫자 증가\n                        likesCount[likes[i]] = likesCount[likes[i]] + 1;\n\n                    return (\n                        <div key={index}>\n                        <p className=\"text-black text-center mt-12\">{item.user}</p>\n                        <p \n                        key={index} \n                        onMouseOver={() => {setLineIndex(index); setSelectedId(item.postId)}} \n                        onMouseLeave={() => setLineIndex(-1)}\n                        onClick={() => router.push(`/board/${item.user}`)}\n                        style={{ whiteSpace: 'pre-wrap' }}\n                        className={index === lineIndex ? \"leading-[38px] text-black font-extralight p-3 mt-2 text-[20px] text-center rounded-md line-highlight\" : \"leading-[38px] text-black font-extralight text-[20px] p-3 mt-2 text-center rounded-md line-un-highlight\"}\n                        >\n                        { unescapedMsg.split(\"\").map((char:string, index:number) => {\n                            let changeColor;\n                            if(likesCount[index] > 8) changeColor = '#A6A6A6';\n                            else if(likesCount[index] >= 7) changeColor = '#ADADAD';\n                            else if(likesCount[index] >= 6) changeColor = '#B5B5B5';\n                            else if(likesCount[index] >= 5) changeColor = '#BFBFBF';\n                            else if(likesCount[index] >= 4) changeColor = '#CCCCCC';\n                            else if(likesCount[index] >= 3) changeColor = '#D9D9D9';\n                            else if(likesCount[index] >= 2) changeColor = '#E6E6E6';\n                            else if(likesCount[index] >= 1) changeColor = '#F2F2F2';\n                            else changeColor = '#FFF'\n\n                            return (\n                            <span key={index} onMouseUp={handleTextSelection} className=\"text-black\" style={{ backgroundColor: changeColor, userSelect: 'text' }}>{char}</span>\n                            )\n                        })\n                        }\n                        </p>\n                        </div>\n                    );\n                })}\n\n                </div>\n            </div>\n        </div>\n    )\n}","/Users/hongseungjae/Desktop/learning.js/scrapper/app/reset/pages.tsx",[],[],"/Users/hongseungjae/Desktop/learning.js/scrapper/app/signup/page.tsx",[],[],"/Users/hongseungjae/Desktop/learning.js/scrapper/app/scrap/page.tsx",["44"],[],"\"use client\";\n\n// 서버에 reverse된 순서로 저장했다가, 0~30 인덱스만 받아오기 -> 자동으로 갱신되는 것\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { useRouter } from 'next/navigation'\nimport { initializeApp } from \"firebase/app\";\nimport HomeIcon from '@mui/icons-material/Home';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport StarIcon from '@mui/icons-material/Star';\nimport { \n  getFirestore, \n  collection,\n  orderBy,\n  // addDoc,   // 임의의 Id 지정\n  // setDoc,   // Id 지정 가능\n  updateDoc,   // update document\n  arrayUnion,   // push elem to array\n  getDocs,  // 전체 읽어오기\n  getDoc,   // 문서 하나 읽어오기\n  deleteDoc, // 삭제\n  doc,       // 특정 데이터 읽기\n  query,\n } from \"firebase/firestore\";\n\nimport '../styles/main.css';\n\nexport default function Scrap() {\n    const router = useRouter();\n    const [postList, setPostList] = useState([]);\n    const [lineIndex, setLineIndex] = useState(-1);\n    const [menuHomeOver, setMenuHomeOver] = useState(false);\n    const [menuMyOver, setMenuMyOver] = useState(false);\n    const [selectedId, setSelectedId] = useState(\"\");\n    const [id, setId] = useState<any>(\"\");\n    const [menuScrapOver, setMenuScrapOver] = useState(false);\n\n    const firebaseConfig = {\n        apiKey: \"AIzaSyB0wNhng69y2_dkHsPjN1k579LeYrSQWdU\",\n        authDomain: \"scrapper-9558b.firebaseapp.com\",\n        databaseURL: \"https://scrapper-9558b-default-rtdb.asia-southeast1.firebasedatabase.app\",\n        projectId: \"scrapper-9558b\",\n        storageBucket: \"scrapper-9558b.appspot.com\",\n        messagingSenderId: \"241265284136\",\n        appId: \"1:241265284136:web:253ec9f008e31a3d03911d\"\n    };\n    const app = initializeApp(firebaseConfig);\n    const db:any = getFirestore(app);\n    \n    useEffect(() => {\n        setId(sessionStorage.getItem('scrapper-login'))\n        getContentFromDb();\n    }, []);\n\n    const getContentFromDb = async () => {\n        let id:any = sessionStorage.getItem('scrapper-login');\n        let scrap:any = [];   \n        await getDoc(doc(db, 'accounts', id))\n        .then((res:any) => {\n            scrap = res.data().scrap;\n        })\n        let q = query(collection(db, 'posts'), orderBy('time', 'desc'))\n        await getDocs(q)\n        .then((res:any) => {\n          let temp:any = [];\n          res.forEach((doc:any) => {\n            let docTemp = doc.data();\n            for(let i=0; i<scrap.length; i++) {\n                if(doc.id === scrap[i]) {\n                    docTemp.postId = doc.id;\n                    temp.push(docTemp);\n                    break;\n                }\n            }\n          });    \n          setPostList(temp);\n        })\n      }\n\n    const uploadLikes= (postId:string, newLikes:string) => {\n        const documentRef = doc(db, 'posts', postId);\n        updateDoc(documentRef, {\n            likes: newLikes\n        });\n        getContentFromDb();\n    }\n    \n    const handleTextSelection = () => {\n        let startIndex;\n        let endIndex;\n        console.log(postList);\n        const findObj = postList.find((item: any) => (item as any).postId === selectedId) as any;\n    \n        const selection = window.getSelection();\n    \n        if (selection && selection.rangeCount > 0) {\n          const range = selection.getRangeAt(0);\n          const selectedText = range.toString();\n          startIndex = findObj.msg.indexOf(selectedText);\n          endIndex = startIndex + selectedText.length - 1;\n        }\n    \n        let testLineBreaks = \"\";    // 줄바꿈 문자만큼 하이라이트를 앞 당김\n        for(let i=0; i<startIndex; i++) {\n          testLineBreaks += findObj.msg[i];\n        }\n        let linebreaks = 0;\n        const matches = testLineBreaks.match(/\\\\n/g);\n        if (matches !== null) {\n          linebreaks = matches.length;\n        }\n    \n        if(linebreaks > 0) {\n          startIndex -= linebreaks;\n          if(endIndex !== undefined)\n            endIndex -= linebreaks;\n        } \n    \n        let length\n        if(endIndex !== undefined)\n          length = endIndex - startIndex;\n        let count = startIndex;\n    \n        if(length !== undefined)\n          for(let i=0; i<length+1; i++) {\n            findObj.likes = findObj.likes + count.toString() + \" \";\n            count++;\n          }\n    \n        uploadLikes(selectedId, findObj.likes);\n      };\n    \n\n    return (\n        <div className=\"h-auto min-h-screen w-screen bg-white flex flex-col justify-center items-center\">\n            <div className=\"h-1/6 w-1/2 flex justify-center items-center fixed top-0 z-40\">\n                <p \n                    className=\"tracking-[-5px] text-black text-8xl border-r-4 border-black pr-[15px] \"\n                    style={{fontFamily:'lemon-r'}}>\n                    SCRAPPER\n                </p>\n            </div>\n\n            <div className=\"right-0 mr-12 mt-12 opacity-1 fixed top-0 cursor-pointer flex flex-col\" style={{zIndex:9999}} >\n                <DashboardIcon onClick={()=>router.push('/posts')} onMouseOver={()=>setMenuHomeOver(true)} onMouseLeave={()=>setMenuHomeOver(false)} className={menuHomeOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black'}} />\n                <HomeIcon onClick={()=>router.push('/')} onMouseOver={()=>setMenuMyOver(true)} onMouseLeave={()=>setMenuMyOver(false)} className={menuMyOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black', marginTop:'3vh'}} />\n                <StarIcon onClick={()=>router.push('/scrap')} onMouseOver={()=>setMenuScrapOver(true)} onMouseLeave={()=>setMenuScrapOver(false)} className={menuScrapOver ? \"scale-up\" : \"scale-down\"} sx={{fontSize:50, color:'black', marginTop:'3vh'}} />\n            </div>\n\n            <div className=\"w-5/6 h-screen\">\n                <div className=\"h-1/5\" />\n                <div className=\"h-auto flex flex-col justify-center items-center\">\n                { postList.map((item:any, index:number) => {\n                    const unescapedMsg = item.msg.replace(/\\\\n/g, \"\\n\");\n                    \n                    // 좋아요 정보 시각화 로직\n                    let likesCount:any = [];\n                    let likes = item.likes.split(\" \");\n                    for(let i=0; i<unescapedMsg.length; i++)  // 초기화\n                    likesCount[i] = 0;\n                    for(let i=0; i<likes.length; i++)  // 드래그된 부분의 숫자 증가\n                        likesCount[likes[i]] = likesCount[likes[i]] + 1;\n\n                    return (\n                        <div key={index}>\n                        <p className=\"text-black text-center mt-12\">{item.user}</p>\n                        <p \n                        key={index} \n                        onMouseOver={() => {setLineIndex(index); setSelectedId(item.postId)}} \n                        onMouseLeave={() => setLineIndex(-1)}\n                        onClick={() => router.push(`/board/${item.user}`)}\n                        style={{ whiteSpace: 'pre-wrap' }}\n                        className={index === lineIndex ? \"leading-[38px] text-black font-extralight p-3 mt-2 text-[20px] text-center rounded-md line-highlight\" : \"leading-[38px] text-black font-extralight text-[20px] p-3 mt-2 text-center rounded-md line-un-highlight\"}\n                        >\n                        { unescapedMsg.split(\"\").map((char:string, index:number) => {\n                            let changeColor;\n                            if(likesCount[index] > 8) changeColor = '#A6A6A6';\n                            else if(likesCount[index] >= 7) changeColor = '#ADADAD';\n                            else if(likesCount[index] >= 6) changeColor = '#B5B5B5';\n                            else if(likesCount[index] >= 5) changeColor = '#BFBFBF';\n                            else if(likesCount[index] >= 4) changeColor = '#CCCCCC';\n                            else if(likesCount[index] >= 3) changeColor = '#D9D9D9';\n                            else if(likesCount[index] >= 2) changeColor = '#E6E6E6';\n                            else if(likesCount[index] >= 1) changeColor = '#F2F2F2';\n                            else changeColor = '#FFF'\n\n                            return (\n                            <span key={index} onMouseUp={handleTextSelection} className=\"text-black\" style={{ backgroundColor: changeColor, userSelect: 'text' }}>{char}</span>\n                            )\n                        })\n                        }\n                        </p>\n                        </div>\n                    );\n                })}\n\n                </div>\n            </div>\n        </div>\n    )\n}",{"ruleId":"45","severity":1,"message":"46","line":74,"column":6,"nodeType":"47","endLine":74,"endColumn":8,"suggestions":"48"},{"ruleId":"45","severity":1,"message":"49","line":104,"column":6,"nodeType":"47","endLine":104,"endColumn":8,"suggestions":"50"},{"ruleId":"45","severity":1,"message":"49","line":51,"column":8,"nodeType":"47","endLine":51,"endColumn":10,"suggestions":"51"},{"ruleId":"45","severity":1,"message":"49","line":53,"column":8,"nodeType":"47","endLine":53,"endColumn":10,"suggestions":"52"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getContentFromDb' and 'params.params.id'. Either include them or remove the dependency array.","ArrayExpression",["53"],"React Hook useEffect has a missing dependency: 'getContentFromDb'. Either include it or remove the dependency array.",["54"],["55"],["56"],{"desc":"57","fix":"58"},{"desc":"59","fix":"60"},{"desc":"59","fix":"61"},{"desc":"59","fix":"62"},"Update the dependencies array to be: [getContentFromDb, params.params.id]",{"range":"63","text":"64"},"Update the dependencies array to be: [getContentFromDb]",{"range":"65","text":"66"},{"range":"67","text":"66"},{"range":"68","text":"66"},[2531,2533],"[getContentFromDb, params.params.id]",[3634,3636],"[getContentFromDb]",[1709,1711],[1804,1806]]